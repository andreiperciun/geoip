<?php
// $Id$

/**
 * @file
 * Language negotiation based on GeoIP detection.
 */

/**
 * Language negotiation option for GeoIP detection.
 *
 * @var integer
 */
define('GEOIP_LANGUAGE_NEGOTIATION_PATH', 8);

/**
 * Key to recognize this language provider.
 *
 * @var string
 */
define('GEOIP_LANGUAGE_NEGOTIATION', 'geoip-language-negotiation');

/**
 * Implements hook_help().
 *
 * @return string
 */
function geoip_language_help($path, $arg) {
  switch ($path) {
    case 'admin/config/regional/language/configure/geoip':
      $help = t('<p>This page provides an overview of your site\'s IP detection and language negotiation settings. You may configure which language is chosen when each country is detected from the user\'s IP, using the form below. All detectable languages are listed in the <em>Detected country</em> drop-down list, and all installed languages are listed in t the <em>Language</em> drop-down list. If a country is detected but doesn\'t have an entry in this list, the default language will be used.</p>');
      return $help;
  }
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function geoip_language_menu() {
  $items = array();

  $items['admin/config/regional/language/configure/geoip'] = array(
    'title' => 'GeoIP',
    'weight' => 5,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geoip_language_form'),
    'access arguments' => array('administer languages'),
    'file' => 'geoip_language.admin.inc',
  );
  $items['admin/config/regional/language/configure/geoip/delete/%'] = array(
    'title' => 'Delete GeoIP mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geoip_admin_delete_mapping', 7),
    'access arguments' => array('administer languages'),
    'type' => MENU_CALLBACK,
    'file' => 'geoip_language.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_language_negotiation_info().
 *
 * @return array
 */
function geoip_language_language_negotiation_info() {
  return array(GEOIP_LANGUAGE_NEGOTIATION => array(
      'callbacks' => array(
        'language' => 'language_negotiation_from_geoip',
        // 'switcher' => 'custom_language_switcher_callback',
        // 'url_rewrite' => 'custom_language_url_rewrite_callback',
      ),
      'file' => drupal_get_path('module', 'geoip_language') . '/geoip_language.module',
      'weight' => -4,
      'name' => 'GeoIP',
      'description' => t('Use the users IP to determine the language'),
      'config' => 'admin/config/regional/language/configure/geoip',
      // 'cache' => 0,
  ),
  );
}

/**
 * Identify language via URL prefix or domain excluding administrative paths.
 * Try to keep as light weight as possible
 *
 * @return string
 *   Language as ISO 639-1 Code
 */
function language_negotiation_from_geoip($languages) {
  // Use the core URL language provider to get a valid language code.
  include_once DRUPAL_ROOT . '/includes/locale.inc';
  include_once DRUPAL_ROOT . '/modules/locale/locale.module';
  include_once dirname(__FILE__) . '/../geoip.module';
  $langcode = geoip_language_detect_language();

  return $langcode;
}

/**
 * Implements custom_url_rewrite_outbound().
 * language_url_rewrite() doesn't add the path prefix for the default language,
 * so we are doing it here.  This lessens the amount of redirection that
 * would occur because of a missing path prefix.
 *
 * @TODO Function disabled - looks like this is not necessary anymore in D7
 */
function _geoip_language_url_outbound_alter(&$path, &$options, $original_path) {
//    global $language;
//
//    if (variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE) == GEOIP_LANGUAGE_NEGOTIATION_PATH
//      && ((int) variable_get('language_count', 1) > 1)) {
//      // Only modify relative (insite) URLs.
//      if (!$options['external']) {
//
//        // Allow links to bypass the language prefixing.  Helpful for simpletest.
//        // Breaking forms as of 2009-06-22
////        if (isset($options['geoip_language_no_prefix']) && ($options['geoip_language_no_prefix'] === TRUE)) {
////          return;
////        }
//
//        // Language can be passed as an option, or we go for current language.
//        if (!isset($options['language'])) {
//          $options['language'] = $language;
//        }
//
//        if (!empty($options['language']->prefix)) {
//          $options['prefix'] = $options['language']->prefix . '/';
//        }
//      }
//    }
}

/**
 * Implements hook_form_locale_languages_configure_form_alter().
 */
function geoip_language_form_locale_languages_configure_form_alter(&$form, $form_state) {
  $form['language_negotiation']['#options'][GEOIP_LANGUAGE_NEGOTIATION_PATH] = t('Path prefix with GeoIP detection fallback.');
}

/**
 * API function to create a new mapping.
 *
 * @return array
 */
function geoip_language_mapping_create($country, $language) {
  $data = array(
    'country' => $country,
    'language' => $language,
  );
  drupal_write_record('geoip_language', $data);

  $countries = geoip_country_values();
  watchdog(
    'geoip_language',
    'GeoIP mapping created for %country',
    array('%country' => $countries[$country])
  );

  geoip_language_mappings(TRUE);

  return $data;
}

/**
 * API function to delete a mapping.
 *
 * @return boolean
 */
function geoip_language_mapping_delete($country) {
  // On error an Exception is thrown
  db_delete('geoip_language')
            ->condition('country', $country)
            ->execute();

  $countries = geoip_country_values();
  watchdog(
    'geoip_language',
    'GeoIP mapping deleted for %country',
    array('%country' => $countries[$country])
  );

  geoip_language_mappings(TRUE);

  return TRUE;
}

/**
 * API function to return the country-language mapping.
 *
 * TODO: Serializing to a text file is insane. This should go into the cache
 * table instead.
 *
 * @return array
 *  Associative array key=countrycode, value= Language as ISO 639-1 Code
 */
function geoip_language_mappings($reset = FALSE) {
  $mapping = drupal_static(__FUNCTION__, NULL);

  if ($reset || !isset($mapping)) {
    $data = cache_get(__METHOD__);
    if ($data != FALSE) {
      $mapping = isset($data->data['geoip']) ? $data->data['geoip'] : NULL;
    }

    // Build the mapping array and cache it to the filesystem.
    if ($reset || !$mapping) {
      $mapping = array();
      $data = array(
        'geoip' => array(),
        'default' => language_default('prefix'),
      );
      $result = db_query(
        'SELECT g.*, l.prefix ' .
        'FROM {geoip_language} g ' .
        'INNER JOIN {languages} l on g.language = l.language ' .
        'ORDER BY g.country ASC'
      );
      foreach ($result as $row) {
        $mapping[$row->country] = $row->language;
        $data['geoip'][$row->country] = $row;
      }
      $data = cache_set(__METHOD__, $data);
    }
  }

  return $mapping;
}

/**
 * Return the language object mapped to the current GeoIP detected country.
 *
 * @return string
 *  Language as ISO 639-1 Code
 *  @link http://de.wikipedia.org/wiki/ISO_639#ISO_639-1  @endlink
 */
function geoip_language_detect_language($reset = FALSE) {
  static $geoip_language = NULL;

  if ($reset || !isset($geoip_language)) {
    // Get a list of country->language mappings.
    $mappings = geoip_language_mappings();
    // GeoIP detect the current country.
    $country_code = geoip_country_code();

    // Make sure country_code, the mapping for that country_code, and the
    // enabled language for that mapping, all exist.
    if ($country_code && isset($mappings[$country_code])) {
      $geoip_language = $mappings[$country_code]->language;
    }
  }
  return $geoip_language;
}

/**
 * Implements hook_flush_caches().
 *
 * @return array
 *  Return an empty array - we do the flush ourselfes
 */
function geoip_language_flush_caches() {
  // Reload the geoip cache file.
  geoip_language_mappings(TRUE);
  return array();
}

/**
 * Implements hook_theme().
 *
 * @return array()
 */
function geoip_language_theme() {
  return array(
    'geoip_language_mapping_overview' => array(
      'arguments' => array('form' => NULL),
  ),
  );
}
